
effect
{
    Name: "Damage",
    Params:
    {
        Amount: Number
    },
    Action: (targets, context) => {
    for target in targets
    {
      i = 0;
      while(i++ < Amount)
      target.Power -= 1;
    };
   }
}
effect
{
    Name: "ReturnToDeck",
    Action: (targets, context) => {
    for target in targets
    {
      owner = target.Owner;
      deck = context.DeckOfPlayer(owner);
      deck.Push(target);
      deck.Shuffle();
      context.Board.Remove(target);
    };
   }
}
effect
{
    Name: "Draw",
    Action: (targets, context) => {
        topCard = context.Deck.Pop();
        context.Hand.Add(topCard);
        context.Hand.Shuffle();
   }
}
card 
{
  Type: "Plata",
  Name: "Beluga",
  Faction: "Gryffindor",
  Power: 10,
  Range: ["Melee", "Ranged"],
  OnActivation: 
  [
    {
      Effect: 
      {
        Name: "Damage",
        Amount: 5
      },
      Selector:
      {
        Source: "board",
        Single: false,
        Predicate: (unit) => unit.Faction == "Gryffindor"
      },
      PostAction:
      {
        Type: "ReturnToDeck",
        Selector:
        {
          Source: "parent",
          Single: false,
          Predicate: (unit) => unit.Power < 1
        }
      }
    },
    {
      Effect: "Draw"
    }
  ]
}
effect
{
    Name: "Damage",
    Action: (targets, context) => {
    for target in targets
    {
      target.Power -= Amount;
    };
   },
    Params:
    {
        Amount: Number
    }
}

      card {
      Type: "Plata",
      Name: "Melissa",
      Faction: "Gryffindor",
      Power: 10,
      Range: [ "Melee"],
      OnActivation: [
 {
   Effect: {
           Name: "Damage",
           Amount: 1,
           },
   Selector: {
             Source: "field",
             Single: false,
             Predicate:
             (unit) => unit.Faction == "Gryffindor"
             },
 }
            ]
      }



effect
{
    Name: "TakeOutToHand",
    Action: (targets, context) => {
    for target in targets
    {
      owner = target.Owner;
      field = context.FieldOfPlayer(owner);
      field.Push(target);
      context.HandOfPlayer(owner).Remove(target);
    };
   }
}



 effect
{
    Name: "RenaceElMonstruo",
    Action: (targets, context) => {
      seleccionadas = context.Graveyard.Find((unit) => unit.Power == 3);
      board = context.Board;
      for target in seleccionadas
      {
        context.Graveyard.Remove(target);
        board.Push(target);
      };
   }
}
effect
{
    Name: "TakeOutToHand",
    Action: (targets, context) => {
      target = context.Hand[0];
      context.Hand.Remove(target);
      field = context.Field;
      field.Push(target);
   }
}

      card {
      Type: "Lider",
      Name: "LeaderRavenclaw",
      Faction: "Gryffindor",
      Power: 7,
      Range: [ "Melee"],
      OnActivation: [
        {
        Effect: "TakeOutToHand"
        }
      ]
      }



      effect
{
    Name: "PutUnit",
    Action: (targets, context) => {
    for target in targets
    {
      field = context.Field;
      field.SendBottom(target);
      context.Deck.Remove(target);
    };
   }
}
      card {
      Type: "Plata",
      Name: "SuperMau",
      Faction: "Gryffindor",
      Power: 6,
      Range: [ "Melee"],
      OnActivation: [
        {
        Effect: 
        {
          Name: "PutUnit",
        },
        Selector: 
        {
          Source: "deck",
          Single: false,
          Predicate: (unit) => unit.Power >= 7
        },
        }
      ]
      }
      
      card {
      Type: "Despeje",
      Name: "nuevoDespeje",
      Faction: "Neutral",
      Power: 7,
      Range: [ "Melee"],
      OnActivation: [
        {
        Effect: "Draw"
        }
      ]
      }

      
      

card {
      Type: "Plata",
      Name: "SuperJenn",
      Faction: "Slytherin",
      Power: 10,
      Range: [ "Melee"],
      OnActivation: [
 {
   Effect: {
           Name: "Damage",
           Amount: 1,
           },
   Selector: {
             Source: "parent",
             Single: false,
             Predicate:
             (unit) => unit.Faction == "Gryffindor"
             },
   PostAction: {
        {
   Effect: {
           Name: "ReturnToDeck",
           },
   Selector: {
             Source: "parent",
             Single: false,
             Predicate:
             (unit) => unit.Name == "Arthur Weasley"
             },
            }
   }
 }
            ]
      }




